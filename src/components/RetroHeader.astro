---
import Logo from '@components/RetroLogo.astro'
const emojis = ['🏫', '🏠', '🏡', '🏢', '🏦', '🏨', '🏪', '🏬', '🏭', '🏰', '⛪', '🏛', '🏗', '🏘', '🏙', '🏚', '🏥', '🏣', '🏤', '🏩', '🏯']


---
<header>
  <img src="/img/znak-orlove.jpg" />
  <img src="/img/retro/logo-sousedi.svg" width="300" />
  <Logo width="300px"/>
  <img src="/img/znak-slezska.svg" />
</header>

<section class="hero-section">
  <div class="loop-container">
    <div class="item">{emojis.sort(() => Math.random() - 0.5)}</div>
    <div class="item">{emojis.sort(() => Math.random() - 0.5)}</div>
  </div>
</section>

<style>
  header {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;

    img {
      width: 20%;
      max-width: 100px;
      height: auto;
      margin: 10px 20px;
    }
  }

  .hero-section {
    padding: 12px 0px;
    position: relative;
    overflow: hidden;
    font: normal 3vw/1 sans-serif;
    @media (min-width: 1000px) {
      font-size: 32px;
    }
  }
</style>

<script>

const lerp = (current: number, target: number, factor: number) => current * (1 - factor) + target * factor;

class LoopingText {
  el: HTMLElement
  lerp: {current: number, target: number}
  interpolationFactor: number
  speed: number
  direction : number
  constructor(el: HTMLElement) {
    this.el = el;
    this.lerp = {current: 0, target: 0};
    this.interpolationFactor = 0.1;
    this.speed = 0.2;
    this.direction = -1; // -1 (to-left), 1 (to-right)

    // Init
    this.el.style.cssText = `position: relative; display: inline-flex; white-space: nowrap;`;
    (this.el.children[1] as HTMLElement).style.cssText = `position: absolute; left: ${100 * -this.direction}%;`;
    this.events();
    this.render();
  }

  events() {
    window.addEventListener("scroll", () => this.lerp.target += this.speed * 5);
  }

  animate() {
    this.lerp.target += this.speed;
    this.lerp.current = lerp(this.lerp.current, this.lerp.target, this.interpolationFactor);

    if (this.lerp.target > 100) {
      this.lerp.current -= this.lerp.target;
      this.lerp.target = 0;
    }

    const x = this.lerp.current * this.direction;
    this.el.style.transform = `translateX(${x}%)`;
  }

  render() {
    this.animate();
    window.requestAnimationFrame(() => this.render());
  }
}

document.querySelectorAll(".loop-container").forEach(el => new LoopingText(el as HTMLElement));

</script>